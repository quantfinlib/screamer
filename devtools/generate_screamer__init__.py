import inspect
import os
from devtools import sii

screamer_bindings_module = sii.load_local_screamer_binding()

def generate_init_py(module, output_path='screamer/__init__.py'):
    # Get all classes and functions not starting with an underscore
    public_members = [
        name for name, obj in inspect.getmembers(module)
        if name[0].isupper() and (inspect.isclass(obj) or inspect.isfunction(obj))
    ]

    # Prepare the content for __init__.py
    init_content = f'''# DO NOT MODIFY, THIS FILE IS AUTOGENERATED
# screamer/__init__.py

__version__ = "Unreleased"

from .screamer_bindings import (
    {", ".join(public_members)}
)

__all__ = [
    {", ".join([f'"{name}"' for name in public_members])}
]
'''

    # Write the content to the output file
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, 'w') as init_file:
        init_file.write(init_content)

    print(f"Generated {output_path} with {len(public_members)} members.")

# Load the module and generate __init__.py
if __name__ == "__main__":
    generate_init_py(screamer_bindings_module)
