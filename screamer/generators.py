# DO NOT MODIFY, THIS FILE IS AUTOGENERATED
# screamer/generators.py

from .screamer_bindings import (
    Diff,
    Ffill,
    FillNa,
    Lag,
    LogReturn,
    Return,
    RollingKurt,
    RollingMax,
    RollingMean,
    RollingMedian,
    RollingMin,
    RollingQuantile,
    RollingSkew,
    RollingStd,
    RollingSum,
    RollingVar,
    RollingZscore             
)

def diff_generator(iterable, window_size):
    """
    Generator version of the Diff class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = Diff(window_size)
    for value in iterable:
        yield indicator(value)


def ffill_generator(iterable, ):
    """
    Generator version of the Ffill class.

    :param iterable: An iterable of numerical values.
    
    """
    indicator = Ffill()
    for value in iterable:
        yield indicator(value)


def fill_na_generator(iterable, fill):
    """
    Generator version of the FillNa class.

    :param iterable: An iterable of numerical values.
    :param fill: No description available    
    """
    indicator = FillNa(fill)
    for value in iterable:
        yield indicator(value)


def lag_generator(iterable, window_size):
    """
    Generator version of the Lag class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = Lag(window_size)
    for value in iterable:
        yield indicator(value)


def log_return_generator(iterable, window_size):
    """
    Generator version of the LogReturn class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = LogReturn(window_size)
    for value in iterable:
        yield indicator(value)


def return_generator(iterable, window_size):
    """
    Generator version of the Return class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = Return(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_kurt_generator(iterable, window_size):
    """
    Generator version of the RollingKurt class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = RollingKurt(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_max_generator(iterable, window_size):
    """
    Generator version of the RollingMax class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = RollingMax(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_mean_generator(iterable, window_size):
    """
    Generator version of the RollingMean class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = RollingMean(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_median_generator(iterable, window_size):
    """
    Generator version of the RollingMedian class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = RollingMedian(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_min_generator(iterable, window_size):
    """
    Generator version of the RollingMin class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = RollingMin(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_quantile_generator(iterable, window_size, quantile):
    """
    Generator version of the RollingQuantile class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available
    :param quantile: No description available    
    """
    indicator = RollingQuantile(window_size, quantile)
    for value in iterable:
        yield indicator(value)


def rolling_skew_generator(iterable, window_size):
    """
    Generator version of the RollingSkew class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = RollingSkew(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_std_generator(iterable, window_size):
    """
    Generator version of the RollingStd class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = RollingStd(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_sum_generator(iterable, window_size):
    """
    Generator version of the RollingSum class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = RollingSum(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_var_generator(iterable, window_size):
    """
    Generator version of the RollingVar class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = RollingVar(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_zscore_generator(iterable, window_size):
    """
    Generator version of the RollingZscore class.

    :param iterable: An iterable of numerical values.
    :param window_size: No description available    
    """
    indicator = RollingZscore(window_size)
    for value in iterable:
        yield indicator(value)

