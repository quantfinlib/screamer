# DO NOT MODIFY, THIS FILE IS AUTOGENERATED
# screamer/generators.py

from .screamer_bindings import (
    Diff,
    EWMA,
    EwStd,
    EwVar,
    FracDiff,
    Lag,
    LogReturn,
    Return,
    RollingKurt,
    RollingMax,
    RollingMean,
    RollingMedian,
    RollingMedian2,
    RollingMin,
    RollingSkew,
    RollingStd,
    RollingSum,
    RollingVar,
    RollingZscore             
)

def diff_generator(iterable, delay):
    """
    Generator version of the Diff class.

    :param iterable: An iterable of numerical values.
    :param delay: The delay parameter, d.    
    """
    indicator = Diff(delay)
    for value in iterable:
        yield indicator(value)


def ewma_generator(iterable, weight):
    """
    Generator version of the EWMA class.

    :param iterable: An iterable of numerical values.
    :param weight: Weight of new values.    
    """
    indicator = EWMA(weight)
    for value in iterable:
        yield indicator(value)


def ew_std_generator(iterable, weight):
    """
    Generator version of the EwStd class.

    :param iterable: An iterable of numerical values.
    :param weight: Weight of new values.    
    """
    indicator = EwStd(weight)
    for value in iterable:
        yield indicator(value)


def ew_var_generator(iterable, weight):
    """
    Generator version of the EwVar class.

    :param iterable: An iterable of numerical values.
    :param weight: Weight of new values.    
    """
    indicator = EwVar(weight)
    for value in iterable:
        yield indicator(value)


def frac_diff_generator(iterable, frac_order, window_size, threshold):
    """
    Generator version of the FracDiff class.

    :param iterable: An iterable of numerical values.
    :param frac_order: The fractional order parameter, d.
    :param window_size: The window_size parameter.
    :param threshold: The threshold parameter.    
    """
    indicator = FracDiff(frac_order, window_size, threshold)
    for value in iterable:
        yield indicator(value)


def lag_generator(iterable, delay):
    """
    Generator version of the Lag class.

    :param iterable: An iterable of numerical values.
    :param delay: The delay parameter, d.    
    """
    indicator = Lag(delay)
    for value in iterable:
        yield indicator(value)


def log_return_generator(iterable, delay):
    """
    Generator version of the LogReturn class.

    :param iterable: An iterable of numerical values.
    :param delay: No description available    
    """
    indicator = LogReturn(delay)
    for value in iterable:
        yield indicator(value)


def return_generator(iterable, delay):
    """
    Generator version of the Return class.

    :param iterable: An iterable of numerical values.
    :param delay: No description available    
    """
    indicator = Return(delay)
    for value in iterable:
        yield indicator(value)


def rolling_kurt_generator(iterable, window_size):
    """
    Generator version of the RollingKurt class.

    :param iterable: An iterable of numerical values.
    :param window_size: The window_size parameter.    
    """
    indicator = RollingKurt(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_max_generator(iterable, window_size):
    """
    Generator version of the RollingMax class.

    :param iterable: An iterable of numerical values.
    :param window_size: The window_size parameter.    
    """
    indicator = RollingMax(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_mean_generator(iterable, window_size):
    """
    Generator version of the RollingMean class.

    :param iterable: An iterable of numerical values.
    :param window_size: The window_size parameter.    
    """
    indicator = RollingMean(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_median_generator(iterable, window_size):
    """
    Generator version of the RollingMedian class.

    :param iterable: An iterable of numerical values.
    :param window_size: The window_size parameter.    
    """
    indicator = RollingMedian(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_median2_generator(iterable, window_size):
    """
    Generator version of the RollingMedian2 class.

    :param iterable: An iterable of numerical values.
    :param window_size: The window_size parameter.    
    """
    indicator = RollingMedian2(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_min_generator(iterable, window_size):
    """
    Generator version of the RollingMin class.

    :param iterable: An iterable of numerical values.
    :param window_size: The window_size parameter.    
    """
    indicator = RollingMin(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_skew_generator(iterable, window_size):
    """
    Generator version of the RollingSkew class.

    :param iterable: An iterable of numerical values.
    :param window_size: The window_size parameter.    
    """
    indicator = RollingSkew(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_std_generator(iterable, window_size):
    """
    Generator version of the RollingStd class.

    :param iterable: An iterable of numerical values.
    :param window_size: The window_size parameter.    
    """
    indicator = RollingStd(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_sum_generator(iterable, window_size):
    """
    Generator version of the RollingSum class.

    :param iterable: An iterable of numerical values.
    :param window_size: The window_size parameter.    
    """
    indicator = RollingSum(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_var_generator(iterable, window_size):
    """
    Generator version of the RollingVar class.

    :param iterable: An iterable of numerical values.
    :param window_size: The window_size parameter.    
    """
    indicator = RollingVar(window_size)
    for value in iterable:
        yield indicator(value)


def rolling_zscore_generator(iterable, window_size):
    """
    Generator version of the RollingZscore class.

    :param iterable: An iterable of numerical values.
    :param window_size: The window_size parameter.    
    """
    indicator = RollingZscore(window_size)
    for value in iterable:
        yield indicator(value)


