import importlib.util
import inspect
import re
import glob
#import screamer.screamer_bindings

def camel_to_snake(name):
    # Insert an underscore before an uppercase letter if preceded by a lowercase letter
    return re.sub(r'(?<=[a-z])([A-Z])', r'_\1', name).lower()


def get_constructor_arguments_from_doc(cls):
    # Get the __init__ method docstring
    init_doc = cls.__init__.__doc__
    
    if not init_doc:
        return None
    
    # Try to extract the argument list from the docstring using a regex
    signature_match = re.search(r'__init__\(self.*?\)\s*->.*', init_doc)
    
    if not signature_match:
        return None
    
    signature_line = signature_match.group(0)
    
    # Extract argument names and types from the signature line
    arg_pattern = re.compile(r'(\w+): (\w+)')
    args = arg_pattern.findall(signature_line)
    
    # Extract argument descriptions from :param sections
    param_pattern = re.compile(r':param (\w+): (.*)')
    param_descriptions = {name: desc for name, desc in param_pattern.findall(init_doc)}
    
    # Combine the arguments, types, and descriptions
    arg_info = []
    for name, arg_type in args:
        if name != 'self':  # Ignore 'self'
            arg_info.append({
                'name': name,
                'type': arg_type,
                'description': param_descriptions.get(name, 'No description available')
            })
    
    return arg_info


def collect_class_info(module):
    info = {}
    classes = inspect.getmembers(module, inspect.isclass)
    for class_name, class_obj in classes:
        info[class_name] = {}
        info[class_name]['args'] = get_constructor_arguments_from_doc(class_obj)
        info[class_name]['doc'] = class_obj.__doc__
        info[class_name]['snake_name'] = camel_to_snake(class_name)
    info = {key: info[key] for key in sorted(info)}
    return info


def generator_code(class_name, snake_name, args):
    arg_list = ', '.join(a['name'] for a in args)
    arg_lines = '\n'.join([f"    :param {a['name']}: {a.get('description', 'parameter.')}" for a in args])
    return f'''
def {snake_name}_generator(iterable, {arg_list}):
    """
    Generator version of the {class_name} class.

    :param iterable: An iterable of numerical values.
{arg_lines}    
    """
    indicator = {class_name}({arg_list})
    for value in iterable:
        yield indicator(value)
'''


so_file_path = glob.glob('screamer/screamer_bindings*.so')[0]

# Load the .so file directly as a module without importing the package
spec = importlib.util.spec_from_file_location('screamer_bindings', so_file_path)
module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(module)  # Load the .so file into the module

info = collect_class_info(module)


# -------------------------------------------------------------------------------
# screamer/__init__.py
# -------------------------------------------------------------------------------
print('generating screamer/__init__.py')
class_list_str = ',\n    '.join(info.keys())
gen_list_str = ',\n    '.join([v['snake_name'] + '_generator' for v in info.values()])
all_list_str = ',\n    '.join([f'"{k}", "' + v['snake_name'] + '_generator"' for k,v in info.items()])

init__py = f"""# DO NOT MODIFY, THIS FILE IS AUTOGENERATED
# screamer/__init__.py

__version__ = "Unreleased"

from .screamer_bindings import (
    {class_list_str}             
)

from .generators import (
    {gen_list_str}             
)

__all__ = [
    {all_list_str}
]
"""

with open("screamer/__init__.py", "w") as file:
    file.write(init__py)

# -------------------------------------------------------------------------------
# screamer/generators.py
# -------------------------------------------------------------------------------
print('generating screamer/generators.py')

generators_py = f"""# DO NOT MODIFY, THIS FILE IS AUTOGENERATED
# screamer/generators.py

from .screamer_bindings import (
    {class_list_str}             
)
"""
with open("screamer/generators.py", "w") as file:
    file.write(generators_py)
    for class_name, class_info in info.items():
        file.write(generator_code(class_name, class_info['snake_name'], class_info['args']) + '\n')
